{
  "openapi": "3.0.0",
  "info": {
    "version": "v2",
    "title": "Finexio API Doc",
    "description": "Testing Staging API Doc (Prod)"
  },
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "servers": [
    {
      "description": "Finexio API Staging",
      "url": "https://api.finexio-stage.com/v2"
    }
  ],
  "paths": {
    "/counterparties/": {
      "get": {
        "summary": "List Counterparties",
        "operationId": "List Counterparties",
        "description": "Get A Paginated List Of All Counterparties",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "internal_id",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updated_after",
            "required": false,
            "in": "query",
            "description": "An ISO 8601 formatted date. The result list will be filtered for counterparties that have been updated since the supplied date.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyListReturn"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "tags": [
          "Counterparties"
        ]
      },
      "post": {
        "operationId": "Create Counterparty",
        "summary": "Create Counterparty",
        "description": "Create A New Counterparty",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "Counterparties"
        ]
      }
    },
    "/counterparties/{id}/": {
      "get": {
        "operationId": "Get Counterparty",
        "summary": "Get Counterparty Detail",
        "description": "Get Information Of A Single Counterparty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyBase"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "tags": [
          "Counterparties"
        ]
      },
      "put": {
        "operationId": "Update Counterparty",
        "summary": "Update Counterparty",
        "description": "Update An Existing Counterparty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyBase"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "tags": [
          "Counterparties"
        ]
      },
      "patch": {
        "operationId": "Partial Update Counterparty",
        "summary": "Partial Update Counterparty",
        "description": "Partially update an existing counterparty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyBase"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "tags": [
          "Counterparties"
        ]
      }
    },
    "/counterparties/history": {
      "get": {
        "summary": "Counterparties Changes History",
        "operationId": "Counterparties History",
        "description": "Changelog for counterparties",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "object_id",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityHistoryModelListReturn"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "tags": [
          "Counterparties"
        ]
      }
    },
    "/invoices/": {
      "get": {
        "operationId": "List Invoices",
        "summary": "List Invoices",
        "description": "Get A Paginated List Of Invoices",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceListReturn"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{key}/": {
      "get": {
        "operationId": "Get Invoice",
        "summary": "Get Invoice Detail",
        "description": "Get Details Of An Invoice By Key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/batch/": {
      "post": {
        "operationId": "Create Invoice Batch",
        "summary": "Batch Create Invoices",
        "description": "Submit an array of invoices.Request Format: Array of Invoice objects",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyApiInvoice"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyApiInvoice"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyApiInvoice"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Try It to see the response"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "tags": [
          "Invoices"
        ]
      }
    },
    "/payments/": {
      "get": {
        "operationId": "List of Payments",
        "summary": "List Payments",
        "description": "Get A Paginated List Of Payments",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tracking_id",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListReturn"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{key}/": {
      "get": {
        "operationId": "Get Payment",
        "summary": "Get Payment Detail",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{key}/images": {
      "get": {
        "operationId": "Get Payment Images",
        "summary": "Payment Images",
        "description": "Get Payment image url in case of printed check. Empty array is returned if there is no image.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckImage"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/webhooks/": {
      "description": "Subscriptions related operations.",
      "get": {
        "servers": [
          {
            "url": "https://api.finexio-stage.com",
            "description": "Base Path Override for Webhooks"
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "operationId": "listSubscribers",
        "summary": "List Subscriptions",
        "description": "List new subscriptions for the currently logged in user.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookListReturn"
                }
              }
            },
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "CreateSubscriber",
        "summary": "Create Subscription",
        "description": "Create new subscriptions for the currently logged in user.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          }
        }
      }
    },
    "/webhooks/{uuid}/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "GetSubscriber",
        "summary": "Get Subscription Detail",
        "description": "Get details for specific subscription.",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "Subscription unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "UpdateSubscriber",
        "summary": "Update Subscription",
        "description": "Update details for specific subscription.",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "Subscription unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "PartialUpdateSubscriber",
        "summary": "Partial Update Subscription",
        "description": "Partially update details for a specific subscription.",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "Subscription unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBodyModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "DeleteSubscriber",
        "summary": "Delete Subscription",
        "description": "Delete details for a specific subscription.",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "Subscription unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "CheckImage": {
        "type": "object",
        "properties": {
          "check_image_url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CounterpartyCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CounterpartyBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "Supplier"
                ]
              }
            },
            "required": [
              "name",
              "type",
              "address_1",
              "city",
              "state",
              "zipcode",
              "country",
              "internal_id",
              "business_type"
            ]
          }
        ]
      },
      "CounterpartyUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CounterpartyBase"
          },
          {
            "type": "object",
            "properties": {
              "bank_account_number": {
                "type": "string",
                "readOnly": true
              },
              "bank_routing_number": {
                "type": "string",
                "readOnly": true
              },
              "address_1": {
                "type": "string",
                "readOnly": true
              },
              "type": {
                "enum": [
                  "Supplier"
                ]
              },
              "address_2": {
                "readOnly": true
              },
              "city": {
                "readOnly": true
              },
              "state": {
                "readOnly": true
              },
              "zipcode": {
                "readOnly": true
              },
              "country": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "CounterpartyBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 40,
            "description": "max length = 40"
          },
          "type": {
            "enum": [
              "Buyer",
              "Supplier"
            ],
            "type": "string",
            "description": "accepts one of these values: [ 'Buyer', 'Supplier' ]"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "address_1": {
            "type": "string",
            "description": "max length = 40"
          },
          "address_2": {
            "type": "string",
            "description": "max length = 40"
          },
          "city": {
            "type": "string",
            "description": "max length = 40"
          },
          "state": {
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "AA",
              "AE",
              "AP",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "AB",
              "BC",
              "MB",
              "NB",
              "NL",
              "NT",
              "NS",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YT"
            ],
            "type": "string",
            "description": "accepts one of these values: [ 'AL', 'AK', 'AS', 'AZ', 'AR', 'AA', 'AE', 'AP', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT' ]"
          },
          "zipcode": {
            "type": "string",
            "maxLength": 10,
            "description": "max length = 10"
          },
          "country": {
            "enum": [
              "CAN",
              "UMI",
              "USA"
            ],
            "type": "string",
            "description": "accepts one of these values: [ 'CAN', 'UMI', 'USA' ]. Default USA if no value specified."
          },
          "primary_contact_email": {
            "type": "string",
            "format": "email",
            "maxLength": 50,
            "description": "max length = 50"
          },
          "remit_email": {
            "type": "string",
            "format": "email"
          },
          "primary_contact_name": {
            "type": "string",
            "maxLength": 40,
            "description": "max length = 40"
          },
          "primary_contact_phone": {
            "type": "string",
            "maxLength": 16,
            "description": "max length = 16"
          },
          "bank_account_number": {
            "type": "string",
            "maxLength": 17,
            "description": "max length = 17"
          },
          "bank_routing_number": {
            "type": "string",
            "maxLength": 9,
            "description": "max length = 9"
          },
          "payment_method": {
            "type": "string"
          },
          "internal_id": {
            "type": "string",
            "maxLength": 100,
            "description": "max length = 100. Square brackets not allowed. For example [supplier_123] is not valid. Secondary identifier for this counterparty. This value must be unique for counterparty type."
          },
          "payment_terms": {
            "type": "integer",
            "description": "Allowed values: min = 0, max = 365. Payment terms is optional field. This is an integer field and represents No. of days."
          },
          "tax_id": {
            "type": "string",
            "maxLength": 12,
            "description": "max length = 12"
          },
          "ineligible_for_conversion": {
            "type": "boolean",
            "description": "Supplier conversion eligibility determines if Finexio SHOULD NOT reach out to this supplier due to high sensitivity or special payment arrangements or contracted terms.",
            "default": false
          },
          "twelve_month_payment_count": {
            "type": "integer"
          },
          "twelve_month_spend": {
            "type": "string"
          },
          "business_type": {
            "enum": [
              "Employee",
              "Business",
              "Individual"
            ],
            "type": "string",
            "description": "Accepts one of these values: [ 'Employee', 'Business', 'Individual' ]"
          },
          "notes": {
            "type": "string",
            "maxLength": 1000,
            "description": "max length = 1000. Optional information about supplier."
          }
        }
      },
      "CounterpartyListReturn": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "readOnly": true
          },
          "previous": {
            "type": "string",
            "readOnly": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CounterpartyBase"
            }
          }
        }
      },
      "DeliveryMethod": {
        "enum": [
          "email",
          "mail",
          "phone",
          "web"
        ],
        "type": "string",
        "readOnly": true
      },
      "EntityHistoryAction": {
        "enum": [
          "Create",
          "Update",
          "Delete",
          "Invitation"
        ],
        "type": "string",
        "readOnly": true
      },
      "EntityHistoryChangeModel": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "readOnly": true
          },
          "oldValue": {
            "type": "object",
            "readOnly": true
          },
          "newValue": {
            "type": "object",
            "readOnly": true
          }
        }
      },
      "EntityHistoryModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "objectId": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "userIpAddress": {
            "type": "string",
            "readOnly": true
          },
          "action": {
            "$ref": "#/components/schemas/EntityHistoryAction"
          },
          "changes": {
            "$ref": "#/components/schemas/EntityHistoryChangeModel"
          },
          "notes": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EntityHistoryModelListReturn": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "readOnly": true
          },
          "previous": {
            "type": "string",
            "readOnly": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityHistoryModel"
            }
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the invoice. This field is read-only.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "amount_cents": {
            "type": "integer",
            "description": "Invoice amount in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
            "maximum": 999999900,
            "minimum": 1
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "discount_amount_cents": {
            "type": "integer",
            "default": 0,
            "description": "Optional invoice discount amount in specified currency's smallest unit.",
            "maximum": 999999900,
            "minimum": 1
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of invoice provided by recipient. Must be +/- 365 days from today."
          },
          "invoice_due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional invoice due date"
          },
          "invoice_number": {
            "type": "string",
            "description": "Uniquely identifies this invoice for recipient.",
            "maxLength": 49
          },
          "note": {
            "type": "string",
            "description": "Optional additional information you would like to include regarding this invoice.",
            "maxLength": 1000
          },
          "originating_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
          },
          "receiving_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of one of your external counterparties (Supplier) that will receive invoice payment."
          },
          "metadata": {
            "type": "object",
            "description": "Additional private data represented as key-value pairs. Both the key and value must be strings or integers."
          },
          "payment_id": {
            "type": "string",
            "readOnly": true,
            "description": "The id of the most recent Payment associated with this invoice."
          },
          "reconciliation_id": {
            "type": "string",
            "readOnly": false,
            "maxLength": 50,
            "description": "A string to identify the invoice in your accounting system."
          },
          "account_number": {
            "type": "string",
            "readOnly": false,
            "maxLength": 250,
            "description": "This sensitive information is stored encrypted and can only be retrieved through the API."
          }
        }
      },
      "InvoiceLineItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "InvoiceListReturn": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "count": {
            "type": "integer"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "LegacyApiInvoice": {
        "type": "object",
        "properties": {
          "amount_cents": {
            "type": "integer",
            "description": "Invoice amount in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "invoice_date": {
            "type": "string",
            "format": "date",
            "description": "Date of invoice provided by recipient. Must be +/- 365 days from today."
          },
          "invoice_number": {
            "type": "string",
            "description": "Uniquely identifies this invoice for recipient.",
            "maxLength": 49
          },
          "invoice_due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional invoice due date"
          },
          "discount_amount_cents": {
            "type": "integer",
            "default": 0,
            "description": "Optional invoice discount amount in specified currency's smallest unit.",
            "minimum": 0
          },
          "note": {
            "type": "string",
            "description": "The optional additional information you would like to include regarding this invoice."
          },
          "originating_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
          },
          "receiving_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of one of your external counterparties (Supplier) that will receive payment."
          },
          "metadata": {
            "type": "object",
            "description": "Additional private data represented as key-value pairs. Both the key and value must be strings or integers."
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "description": "Currency to be used for invoice payment. The accepted value is 'USD'",
            "type": "string"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            }
          },
          "reconciliation_id": {
            "type": "string",
            "readOnly": false,
            "maxLength": 50,
            "description": "A string to identify the invoice in your accounting system."
          },
          "account_number": {
            "type": "string",
            "readOnly": false,
            "maxLength": 250,
            "description": "This sensitive information is stored encrypted and can only be retrieved through the API."
          }
        },
        "required": [
          "amount_cents",
          "invoice_date",
          "invoice_number",
          "originating_counterparty_id",
          "receiving_counterparty_id"
        ]
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "amount_cents": {
            "type": "integer",
            "readOnly": true
          },
          "currency": {
            "type": "integer",
            "readOnly": true
          },
          "originating_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
          },
          "receiving_counterparty_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The ID of one of your external counterparties (Supplier) that will receive payment."
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "delivery_method": {
            "$ref": "#/components/schemas/DeliveryMethod"
          },
          "tracking_id": {
            "type": "string",
            "description": "Used to reference this payment when communicating with Finexio's Customer Support and Payment Operations teams.",
            "readOnly": true
          },
          "instrument_number": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "events": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentEvent"
            }
          },
          "invoices": {
            "type": "array",
            "description": "List of invoices associated with this payment.",
            "items": {
              "$ref": "#/components/schemas/PaymentInvoice"
            }
          },
          "adjustments": {
            "type": "object",
            "readOnly": true
          }
        }
      },
      "PaymentEvent": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "event_code": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "amount_cents": {
            "type": "string",
            "readOnly": true
          },
          "stage": {
            "type": "string",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "readOnly": true
          },
          "event_name": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PaymentInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "invoice_number": {
            "type": "string",
            "readOnly": true
          },
          "payment_amount_cents": {
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "PaymentListReturn": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "count": {
            "type": "integer"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "PaymentStatus": {
        "enum": [
          "pending",
          "in-progress",
          "settled",
          "cancelled"
        ],
        "type": "string",
        "readOnly": true,
        "description": "Current payment status"
      },
      "PaymentType": {
        "enum": [
          "check",
          "ach",
          "card",
          "wire"
        ],
        "type": "string",
        "readOnly": true
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        }
      },
      "Webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookRequestBodyModel"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "subscription": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "WebhookListReturn": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "count": {
            "type": "integer"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "WebhookRequestBodyModel": {
        "type": "object",
        "properties": {
          "event": {
            "enum": [
              "payment.changed"
            ],
            "type": "string",
            "description": "Name of event to connect with"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Callback URL",
            "maxLength": 190,
            "pattern": "^(?:[a-z0-9\\.\\-\\+]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[/?#][^\\s]*)?"
          },
          "content_type": {
            "enum": [
              "application/json",
              "application/x-www-form-urlencoded"
            ],
            "type": "string",
            "description": "Desired content type for requests to this callback."
          },
          "user": {
            "type": "integer"
          },
          "username": {
            "type": "string",
            "description": "Basic Auth username",
            "maxLength": 190
          },
          "password": {
            "type": "string",
            "description": "Basic Auth password",
            "maxLength": 190
          }
        },
        "required": [
          "event",
          "url",
          "username",
          "password"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Counterparties",
      "description": "Counterparties management"
    },
    {
      "name": "Payments",
      "description": "Payments  management"
    },
    {
      "name": "Invoices",
      "description": "Invoices  management"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks to be used by developers"
    }
  ]
}