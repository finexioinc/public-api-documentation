{
    "openapi": "3.0.0",
    "info": {
        "version": "v2",
        "title": "Finexio API Doc",
        "description": "Testing Staging API Doc (Prod)"
    },
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "servers": [
        {
            "description": "Finexio API Staging",
            "url": "https://api.finexio-stage.com/v2"
        }
    ],
    "paths": {
        "/counterparties/": {
            "get": {
                "summary": "List Counterparties",
                "operationId": "List Counterparties",
                "description": "Get A Paginated List Of All Counterparties",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "internal_id",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "updated_after",
                        "required": false,
                        "in": "query",
                        "description": "An ISO 8601 formatted date. The result list will be filtered for counterparties that have been updated since the supplied date.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CounterpartyListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            },
            "post": {
                "operationId": "Create Counterparty",
                "summary": "Create Counterparty",
                "description": "Create A New Counterparty",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            }
        },
        "/counterparties/{id}/": {
            "get": {
                "operationId": "Get Counterparty",
                "summary": "Get Counterparty Detail",
                "description": "Get Information Of A Single Counterparty",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CounterpartyBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            },
            "put": {
                "operationId": "Update Counterparty",
                "summary": "Update Counterparty",
                "description": "Update An Existing Counterparty",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CounterpartyBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            },
            "patch": {
                "operationId": "Partial Update Counterparty",
                "summary": "Partial Update Counterparty",
                "description": "Partially update an existing counterparty",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CounterpartyBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Try It to see the response"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            }
        },
        "/counterparties/history": {
            "get": {
                "summary": "Counterparties Changes History",
                "operationId": "Counterparties History",
                "description": "Changelog for counterparties",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "object_id",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityHistoryModelListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Counterparties"
                ]
            }
        },
        "/counterparties/suppliers": {
            "get": {
                "summary": "List Suppliers",
                "operationId": "List Suppliers",
                "description": "Get A Paginated List Of All Suppliers",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "required": false,
                        "in": "query",
                        "description": "external_reference_id of Supplier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "updated_after",
                        "required": false,
                        "in": "query",
                        "description": "An ISO 8601 formatted date. The result list will be filtered for suppliers that have been updated since the supplied date.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            },
            "post": {
                "operationId": "Create Supplier",
                "summary": "Create Supplier",
                "description": "Create A New Supplier",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/counterparties/suppliers/{id}/": {
            "get": {
                "operationId": "Get Supplier",
                "summary": "Get Supplier Detail",
                "description": "Get Information Of A Single Supplier",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            },
            "put": {
                "operationId": "Update Supplier",
                "summary": "Update Supplier",
                "description": "Update An Existing Supplier",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            },
            "patch": {
                "operationId": "Partial Update Supplier",
                "summary": "Partial Update Supplier",
                "description": "Partially update an existing Supplier",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Try It to see the response"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/counterparties/suppliers/{supplier_id}/contacts": {
            "get": {
                "summary": "List Supplier Contacts",
                "operationId": "List Supplier Contacts",
                "description": "Get A List Of Supplier Contacts",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupplierContact"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            },
            "post": {
                "operationId": "Add Supplier Contacts",
                "summary": "Add Supplier Contacts",
                "description": "Add contacts to an existing Supplier",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/counterparties/suppliers/{supplier_id}/contacts/{contact_external_reference_id}": {
            "put": {
                "operationId": "Update Supplier Contact",
                "summary": "Update Supplier Contact",
                "description": "Update Supplier's exsiting Contact",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierContact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierContact"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Suppliers"
                ]
            },
            "delete": {
                "tags": [
                    "Suppliers"
                ],
                "operationId": "Delete Supplier Contact",
                "summary": "Delete Supplier Contact",
                "description": "Delete contacts for a Supplier.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                }
            }
        },
        "/counterparties/buyers": {
            "get": {
                "summary": "List Buyers",
                "operationId": "List Buyers",
                "description": "Get A Paginated List Of All Buyers",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "required": false,
                        "in": "query",
                        "description": "external_reference_id of Buyer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "updated_after",
                        "required": false,
                        "in": "query",
                        "description": "An ISO 8601 formatted date. The result list will be filtered for buyers that have been updated since the supplied date.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            },
            "post": {
                "operationId": "Create Buyer",
                "summary": "Create Buyer",
                "description": "Create A New Buyer",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            }
        },
        "/counterparties/buyers/{id}/": {
            "get": {
                "operationId": "Get Buyer",
                "summary": "Get Buyer Detail",
                "description": "Get Information Of A Single Buyer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            },
            "put": {
                "operationId": "Update Buyer",
                "summary": "Update Buyer",
                "description": "Update An Existing Buyer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            },
            "patch": {
                "operationId": "Partial Update Buyer",
                "summary": "Partial Update Buyer",
                "description": "Partially update an existing Buyer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerBase"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Try It to see the response"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            }
        },
        "/counterparties/suppliers/{buyer_id}/contacts": {
            "get": {
                "summary": "List Buyer Contacts",
                "operationId": "List Buyer Contacts",
                "description": "Get A List Of Buyer Contacts",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BuyerContact"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            },
            "post": {
                "operationId": "Add Buyer Contacts",
                "summary": "Add Buyer Contacts",
                "description": "Add contacts to an existing Buyer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            }
        },
        "/counterparties/suppliers/{buyer_id}/contacts/{contact_external_reference_id}": {
            "put": {
                "operationId": "Update Buyer Contact",
                "summary": "Update Buyer Contact",
                "description": "Update Buyer's exsiting Contact",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerContact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerContact"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Buyers"
                ]
            },
            "delete": {
                "tags": [
                    "Buyers"
                ],
                "operationId": "Delete Buyer Contact",
                "summary": "Delete Buyer Contact",
                "description": "Delete contacts for a Buyer.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external_reference_id",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                }
            }
        },
        "/invoices/": {
            "get": {
                "operationId": "List Invoices",
                "summary": "List Invoices",
                "description": "Get A Paginated List Of Invoices",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Invoices"
                ]
            }
        },
        "/invoices/{key}/": {
            "get": {
                "operationId": "Get Invoice",
                "summary": "Get Invoice Detail",
                "description": "Get Details Of An Invoice By Key",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Invoices"
                ]
            }
        },
        "/invoices/batch/": {
            "post": {
                "operationId": "Create Invoice Batch",
                "summary": "Batch Create Invoices",
                "description": "Submit an array of invoices.Request Format: Array of Invoice objects",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LegacyApiInvoice"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LegacyApiInvoice"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LegacyApiInvoice"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Try It to see the response"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "Invoices"
                ]
            }
        },
        "/payments/": {
            "get": {
                "operationId": "List of Payments",
                "summary": "List Payments",
                "description": "Get A Paginated List Of Payments",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tracking_id",
                        "required": false,
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Payments"
                ]
            }
        },
        "/payments/{key}/": {
            "get": {
                "operationId": "Get Payment",
                "summary": "Get Payment Detail",
                "description": "",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Payments"
                ]
            }
        },
        "/payments/{key}/images": {
            "get": {
                "operationId": "Get Payment Images",
                "summary": "Payment Images",
                "description": "Get Payment image url in case of printed check. Empty array is returned if there is no image.",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckImage"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Payments"
                ]
            }
        },
        "/webhooks/": {
            "description": "Subscriptions related operations.",
            "get": {
                "servers": [
                    {
                        "url": "https://api.finexio-stage.com",
                        "description": "Base Path Override for Webhooks"
                    }
                ],
                "tags": [
                    "Webhooks"
                ],
                "operationId": "listSubscribers",
                "summary": "List Subscriptions",
                "description": "List new subscriptions for the currently logged in user.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookListReturn"
                                }
                            }
                        },
                        "description": "Success"
                    }
                }
            },
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "operationId": "CreateSubscriber",
                "summary": "Create Subscription",
                "description": "Create new subscriptions for the currently logged in user.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/webhooks/{uuid}/": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "operationId": "GetSubscriber",
                "summary": "Get Subscription Detail",
                "description": "Get details for specific subscription.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "required": true,
                        "description": "Subscription unique identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Webhooks"
                ],
                "operationId": "UpdateSubscriber",
                "summary": "Update Subscription",
                "description": "Update details for specific subscription.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "required": true,
                        "description": "Subscription unique identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Updated"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Webhooks"
                ],
                "operationId": "PartialUpdateSubscriber",
                "summary": "Partial Update Subscription",
                "description": "Partially update details for a specific subscription.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "required": true,
                        "description": "Subscription unique identifer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "event",
                                            "url",
                                            "username",
                                            "password"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Updated"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Webhooks"
                ],
                "operationId": "DeleteSubscriber",
                "summary": "Delete Subscription",
                "description": "Delete details for a specific subscription.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "required": true,
                        "description": "Subscription unique identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "BasicAuth": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "schemas": {
            "BuyerBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 120,
                        "description": "max length = 120"
                    },
                    "address_1": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "address_2": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "city": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "state": {
                        "enum": [
                            "AL",
                            "AK",
                            "AS",
                            "AZ",
                            "AR",
                            "AA",
                            "AE",
                            "AP",
                            "CA",
                            "CO",
                            "CT",
                            "DE",
                            "DC",
                            "FL",
                            "GA",
                            "GU",
                            "HI",
                            "ID",
                            "IL",
                            "IN",
                            "IA",
                            "KS",
                            "KY",
                            "LA",
                            "ME",
                            "MD",
                            "MA",
                            "MI",
                            "MN",
                            "MS",
                            "MO",
                            "MT",
                            "NE",
                            "NV",
                            "NH",
                            "NJ",
                            "NM",
                            "NY",
                            "NC",
                            "ND",
                            "MP",
                            "OH",
                            "OK",
                            "OR",
                            "PA",
                            "PR",
                            "RI",
                            "SC",
                            "SD",
                            "TN",
                            "TX",
                            "UT",
                            "VT",
                            "VI",
                            "VA",
                            "WA",
                            "WV",
                            "WI",
                            "WY",
                            "AB",
                            "BC",
                            "MB",
                            "NB",
                            "NL",
                            "NT",
                            "NS",
                            "NU",
                            "ON",
                            "PE",
                            "QC",
                            "SK",
                            "YT"
                        ],
                        "type": "string",
                        "maxLength": 2,
                        "description": "accepts one of these values: [ 'AL', 'AK', 'AS', 'AZ', 'AR', 'AA', 'AE', 'AP', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT' ]"
                    },
                    "zipcode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "max length = 10"
                    },
                    "country": {
                        "enum": [
                            "CAN",
                            "UMI",
                            "USA"
                        ],
                        "default": "USA",
                        "type": "string",
                        "description": "accepts one of these values: [ 'CAN', 'UMI', 'USA' ]."
                    },
                    "corporate_phone_number": {
                        "type": "string",
                        "maxLength": 16,
                        "description": "max length = 16"
                    },
                    "external_reference_id": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "max length = 200. Secondary identifier. This value must be unique."
                    },
                    "remit_data": {
                        "type": "string",
                        "maxLength": 70,
                        "description": "max length = 70"
                    },
                    "tax_id": {
                        "type": "string",
                        "maxLength": 11,
                        "description": "max length = 11"
                    },
                    "funding_method": {
                        "type": "string",
                        "enum": [
                            "ach_debit",
                            "ach_same_day_debit",
                            "ach_credit",
                            "wire",
                            "reverse_wire"
                        ],
                        "description": "accepts one of these values: [ 'ach_debit', 'ach_credit', 'wire', 'reverse_wire', 'ach_same_day_debit' ]."
                    },
                    "drawdown_bank_account_number": {
                        "type": "string",
                        "maxLength": 17,
                        "description": "max length = 17\nrequired only if funding_method is 'ach_debit' or 'reverse_wire'"
                    },
                    "drawdown_bank_routing_number": {
                        "type": "string",
                        "maxLength": 9,
                        "description": "max length = 9\nrequired only if funding_method is 'ach_debit' or 'reverse_wire'"
                    },
                    "refund_bank_account_number": {
                        "type": "string",
                        "maxLength": 17,
                        "description": "max length = 17"
                    },
                    "refund_bank_routing_number": {
                        "type": "string",
                        "maxLength": 9,
                        "description": "max length = 9"
                    },
                    "contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuyerContact"
                        }
                    },
                    "ready_for_use": {
                        "type": "boolean",
                        "default": false,
                        "readOnly": true
                    },
                    "reason_not_usable": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40",
                        "readOnly": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Array of name/value pairs.The name can be any character string not beginning with _ with a max length of 25 characters, The value can have a max length of 100 chars and can be null."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "BuyerCreate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BuyerBase"
                    },
                    {
                        "required": [
                            "name",
                            "external_reference_id",
                            "tax_id",
                            "funding_method",
                            "address_1",
                            "city",
                            "state",
                            "zipcode",
                            "country"
                        ]
                    }
                ]
            },
            "BuyerUpdate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BuyerBase"
                    }
                ]
            },
            "BuyerListReturn": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "next": {
                        "type": "string",
                        "readOnly": true
                    },
                    "previous": {
                        "type": "string",
                        "readOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuyerBase"
                        }
                    }
                }
            },
            "BuyerContact": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ContactBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "funding_notification": {
                                "type": "boolean",
                                "default": false,
                                "description": "Indicates if this contact should receive funding notifications."
                            },
                            "refund_notification": {
                                "type": "boolean",
                                "default": false,
                                "description": "Indicates if this contact should receive refund notifications."
                            }
                        }
                    }
                ]
            },
            "CheckImage": {
                "type": "object",
                "properties": {
                    "check_image_url": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ContactBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This will be generated by Finexio.",
                        "readOnly": true
                    },
                    "external_reference_id": {
                        "type": "string",
                        "maxLength": 100,
                        "description": "max length = 100\nThis value must be unique."
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 50,
                        "description": "max length = 50"
                    },
                    "phone": {
                        "type": "string",
                        "maxLength": 17,
                        "description": "max length = 17"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether the contact is the primary contact."
                    }
                },
                "required": [
                    "primary"
                ]
            },
            "CounterpartyCreate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CounterpartyBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "Supplier"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "internal_id"
                        ]
                    }
                ]
            },
            "CounterpartyUpdate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CounterpartyBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "bank_account_number": {
                                "type": "string",
                                "maxLength": 17,
                                "description": "max length = 17\nrequired when payment_method is ACH or Wire\nUpdate allowed only with permission."
                            },
                            "bank_routing_number": {
                                "type": "string",
                                "maxLength": 9,
                                "description": "max length = 9\nrequired when payment_method is ACH or Wire\nUpdate allowed only with permission."
                            },
                            "payment_method": {
                                "type": "string",
                                "enum": [
                                    "ACH",
                                    "Card",
                                    "PrintedCheck",
                                    "Wire"
                                ],
                                "description": "accepts one of these values: [ 'ACH', 'Card', 'PrintedCheck','Wire' ]. Default ACH if no value specified.\nUpdate allowed only with permission."
                            }
                        }
                    }
                ]
            },
            "CounterpartyBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100,
                        "description": "max length = 100"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "address_1": {
                        "type": "string",
                        "description": "max length = 40\nrequired only if payment_method is PrintedCheck"
                    },
                    "address_2": {
                        "type": "string",
                        "description": "max length = 40"
                    },
                    "city": {
                        "type": "string",
                        "description": "max length = 40\nrequired only if payment_method is PrintedCheck"
                    },
                    "state": {
                        "enum": [
                            "AL",
                            "AK",
                            "AS",
                            "AZ",
                            "AR",
                            "AA",
                            "AE",
                            "AP",
                            "CA",
                            "CO",
                            "CT",
                            "DE",
                            "DC",
                            "FL",
                            "GA",
                            "GU",
                            "HI",
                            "ID",
                            "IL",
                            "IN",
                            "IA",
                            "KS",
                            "KY",
                            "LA",
                            "ME",
                            "MD",
                            "MA",
                            "MI",
                            "MN",
                            "MS",
                            "MO",
                            "MT",
                            "NE",
                            "NV",
                            "NH",
                            "NJ",
                            "NM",
                            "NY",
                            "NC",
                            "ND",
                            "MP",
                            "OH",
                            "OK",
                            "OR",
                            "PA",
                            "PR",
                            "RI",
                            "SC",
                            "SD",
                            "TN",
                            "TX",
                            "UT",
                            "VT",
                            "VI",
                            "VA",
                            "WA",
                            "WV",
                            "WI",
                            "WY",
                            "AB",
                            "BC",
                            "MB",
                            "NB",
                            "NL",
                            "NT",
                            "NS",
                            "NU",
                            "ON",
                            "PE",
                            "QC",
                            "SK",
                            "YT"
                        ],
                        "type": "string",
                        "description": "required only if payment_method is PrintedCheck\naccepts one of these values: [ 'AL', 'AK', 'AS', 'AZ', 'AR', 'AA', 'AE', 'AP', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT' ]"
                    },
                    "zipcode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "max length = 10\nrequired only if payment_method is PrintedCheck"
                    },
                    "country": {
                        "enum": [
                            "CAN",
                            "UMI",
                            "USA"
                        ],
                        "default": "USA",
                        "type": "string",
                        "description": "accepts one of these values: [ 'CAN', 'UMI', 'USA' ]. Default USA if no value specified."
                    },
                    "primary_contact_email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 50,
                        "description": "max length = 50"
                    },
                    "remit_email": {
                        "type": "string",
                        "maxLength": 50,
                        "format": "email",
                        "description": "required if payment_method is Card/ACH or payment_method is PrintedCheck and country is CAN."
                    },
                    "primary_contact_name": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "primary_contact_phone": {
                        "type": "string",
                        "maxLength": 16,
                        "description": "max length = 16"
                    },
                    "bank_account_number": {
                        "type": "string",
                        "maxLength": 17,
                        "description": "max length = 17\nrequired when payment_method is ACH or Wire"
                    },
                    "bank_routing_number": {
                        "type": "string",
                        "maxLength": 9,
                        "description": "max length = 9\nrequired when payment_method is ACH or Wire"
                    },
                    "payment_method": {
                        "type": "string",
                        "enum": [
                            "ACH",
                            "Card",
                            "PrintedCheck",
                            "Wire"
                        ],
                        "description": "accepts one of these values: [ 'ACH', 'Card', 'PrintedCheck','Wire' ]. Default ACH if no value specified."
                    },
                    "internal_id": {
                        "type": "string",
                        "maxLength": 100,
                        "description": "max length = 100. Secondary identifier for this counterparty. This value must be unique for counterparty type."
                    },
                    "payment_terms": {
                        "type": "integer",
                        "description": "Allowed values: min = 0, max = 365. Payment terms is optional field. This is an integer field and represents No. of days."
                    },
                    "tax_id": {
                        "type": "string",
                        "maxLength": 11,
                        "description": "max length = 11"
                    },
                    "ineligible_for_conversion": {
                        "type": "boolean",
                        "description": "Supplier conversion eligibility determines if Finexio SHOULD NOT reach out to this supplier due to high sensitivity or special payment arrangements or contracted terms.",
                        "default": false
                    },
                    "twelve_month_payment_count": {
                        "type": "integer"
                    },
                    "twelve_month_spend": {
                        "type": "decimal"
                    },
                    "business_type": {
                        "enum": [
                            "Employee",
                            "Business",
                            "Individual"
                        ],
                        "type": "string",
                        "description": "Accepts one of these values: [ 'Employee', 'Business', 'Individual' ]"
                    },
                    "notes": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "max length = 1000. Optional information about supplier."
                    }
                }
            },
            "CounterpartyListReturn": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "next": {
                        "type": "string",
                        "readOnly": true
                    },
                    "previous": {
                        "type": "string",
                        "readOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CounterpartyBase"
                        }
                    }
                }
            },
            "DeliveryMethod": {
                "enum": [
                    "email",
                    "mail",
                    "phone",
                    "web"
                ],
                "type": "string",
                "readOnly": true
            },
            "EntityHistoryAction": {
                "enum": [
                    "Create",
                    "Update",
                    "Delete",
                    "Invitation"
                ],
                "type": "string",
                "readOnly": true
            },
            "EntityHistoryChangeModel": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "readOnly": true
                    },
                    "oldValue": {
                        "type": "object",
                        "readOnly": true
                    },
                    "newValue": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            },
            "EntityHistoryModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "objectId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "readOnly": true
                    },
                    "userIpAddress": {
                        "type": "string",
                        "readOnly": true
                    },
                    "action": {
                        "$ref": "#/components/schemas/EntityHistoryAction"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/EntityHistoryChangeModel"
                    },
                    "notes": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "EntityHistoryModelListReturn": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "next": {
                        "type": "string",
                        "readOnly": true
                    },
                    "previous": {
                        "type": "string",
                        "readOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityHistoryModel"
                        }
                    }
                }
            },
            "Invoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the invoice. This field is read-only.",
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "amount_cents": {
                        "type": "integer",
                        "description": "Invoice amount in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
                        "maximum": 999999900,
                        "minimum": 1
                    },
                    "currency": {
                        "enum": [
                            "USD"
                        ],
                        "type": "string"
                    },
                    "discount_amount_cents": {
                        "type": "integer",
                        "default": 0,
                        "description": "Optional invoice discount amount in specified currency's smallest unit.",
                        "maximum": 999999900,
                        "minimum": 1
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of invoice provided by recipient. Must be +/- 365 days from today."
                    },
                    "invoice_due_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Optional invoice due date"
                    },
                    "invoice_number": {
                        "type": "string",
                        "description": "Uniquely identifies this invoice for recipient.",
                        "maxLength": 49
                    },
                    "note": {
                        "type": "string",
                        "description": "Optional additional information you would like to include regarding this invoice.",
                        "maxLength": 1000
                    },
                    "originating_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
                    },
                    "receiving_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The ID of one of your external counterparties (Supplier) that will receive invoice payment."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional private data represented as key-value pairs. Both the key and value must be strings or integers."
                    },
                    "payment_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the most recent Payment associated with this invoice."
                    },
                    "reconciliation_id": {
                        "type": "string",
                        "readOnly": false,
                        "maxLength": 50,
                        "description": "A string to identify the invoice in your accounting system."
                    },
                    "account_number": {
                        "type": "string",
                        "readOnly": false,
                        "maxLength": 250,
                        "description": "This sensitive information is stored encrypted and can only be retrieved through the API."
                    }
                }
            },
            "InvoiceLineItem": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    }
                }
            },
            "InvoiceListReturn": {
                "type": "object",
                "readOnly": true,
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "next": {
                        "type": "string"
                    },
                    "previous": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Invoice"
                        }
                    }
                }
            },
            "LegacyApiInvoice": {
                "type": "object",
                "properties": {
                    "amount_cents": {
                        "type": "integer",
                        "description": "Invoice amount in specified currency's smallest unit. e.g. $10 would be represented as 1000."
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date",
                        "description": "Date of invoice provided by recipient. Must be +/- 365 days from today."
                    },
                    "invoice_number": {
                        "type": "string",
                        "description": "Uniquely identifies this invoice for recipient.",
                        "maxLength": 49
                    },
                    "invoice_due_date": {
                        "type": "string",
                        "format": "date",
                        "description": "Optional invoice due date"
                    },
                    "discount_amount_cents": {
                        "type": "integer",
                        "default": 0,
                        "description": "Optional invoice discount amount in specified currency's smallest unit.",
                        "minimum": 0
                    },
                    "note": {
                        "type": "string",
                        "description": "The optional additional information you would like to include regarding this invoice."
                    },
                    "originating_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
                    },
                    "receiving_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The ID of one of your external counterparties (Supplier) that will receive payment."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional private data represented as key-value pairs. Both the key and value must be strings or integers."
                    },
                    "currency": {
                        "enum": [
                            "USD"
                        ],
                        "description": "Currency to be used for invoice payment. The accepted value is 'USD'",
                        "type": "string"
                    },
                    "line_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineItem"
                        }
                    },
                    "reconciliation_id": {
                        "type": "string",
                        "readOnly": false,
                        "maxLength": 50,
                        "description": "A string to identify the invoice in your accounting system."
                    },
                    "account_number": {
                        "type": "string",
                        "readOnly": false,
                        "maxLength": 250,
                        "description": "This sensitive information is stored encrypted and can only be retrieved through the API."
                    }
                },
                "required": [
                    "amount_cents",
                    "invoice_date",
                    "invoice_number",
                    "originating_counterparty_id",
                    "receiving_counterparty_id"
                ]
            },
            "Payment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "amount_cents": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "currency": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "originating_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "The ID of one of your organization's internal counterparties (Buyer) that will send payment."
                    },
                    "receiving_counterparty_id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "The ID of one of your external counterparties (Supplier) that will receive payment."
                    },
                    "payment_method": {
                        "$ref": "#/components/schemas/PaymentType"
                    },
                    "delivery_method": {
                        "$ref": "#/components/schemas/DeliveryMethod"
                    },
                    "tracking_id": {
                        "type": "string",
                        "description": "Used to reference this payment when communicating with Finexio's Customer Support and Payment Operations teams.",
                        "readOnly": true
                    },
                    "instrument_number": {
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/PaymentStatus"
                    },
                    "events": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PaymentEvent"
                        }
                    },
                    "invoices": {
                        "type": "array",
                        "description": "List of invoices associated with this payment.",
                        "items": {
                            "$ref": "#/components/schemas/PaymentInvoice"
                        }
                    },
                    "adjustments": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            },
            "PaymentEvent": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "event_code": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amount_cents": {
                        "type": "string",
                        "readOnly": true
                    },
                    "stage": {
                        "type": "string",
                        "readOnly": true
                    },
                    "method": {
                        "type": "string",
                        "readOnly": true
                    },
                    "event_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "PaymentInvoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "invoice_number": {
                        "type": "string",
                        "readOnly": true
                    },
                    "payment_amount_cents": {
                        "type": "integer",
                        "readOnly": true
                    }
                }
            },
            "PaymentListReturn": {
                "type": "object",
                "readOnly": true,
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "next": {
                        "type": "string"
                    },
                    "previous": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        }
                    }
                }
            },
            "PaymentStatus": {
                "enum": [
                    "pending",
                    "in-progress",
                    "settled",
                    "cancelled"
                ],
                "type": "string",
                "readOnly": true,
                "description": "Current payment status"
            },
            "PaymentType": {
                "enum": [
                    "check",
                    "ach",
                    "card",
                    "wire"
                ],
                "type": "string",
                "readOnly": true
            },
            "ProblemDetails": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "instance": {
                        "type": "string"
                    }
                }
            },
            "SupplierBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100,
                        "description": "max length = 100"
                    },
                    "care_of": {
                        "type": "string",
                        "maxLength": 36,
                        "description": "max length = 36"
                    },
                    "remit_address_1": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40\nrequired only if payment_method is 'Check'"
                    },
                    "remit_address_2": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "remit_city": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40\nrequired only if payment_method is 'Check'"
                    },
                    "remit_state": {
                        "enum": [
                            "AL",
                            "AK",
                            "AS",
                            "AZ",
                            "AR",
                            "AA",
                            "AE",
                            "AP",
                            "CA",
                            "CO",
                            "CT",
                            "DE",
                            "DC",
                            "FL",
                            "GA",
                            "GU",
                            "HI",
                            "ID",
                            "IL",
                            "IN",
                            "IA",
                            "KS",
                            "KY",
                            "LA",
                            "ME",
                            "MD",
                            "MA",
                            "MI",
                            "MN",
                            "MS",
                            "MO",
                            "MT",
                            "NE",
                            "NV",
                            "NH",
                            "NJ",
                            "NM",
                            "NY",
                            "NC",
                            "ND",
                            "MP",
                            "OH",
                            "OK",
                            "OR",
                            "PA",
                            "PR",
                            "RI",
                            "SC",
                            "SD",
                            "TN",
                            "TX",
                            "UT",
                            "VT",
                            "VI",
                            "VA",
                            "WA",
                            "WV",
                            "WI",
                            "WY",
                            "AB",
                            "BC",
                            "MB",
                            "NB",
                            "NL",
                            "NT",
                            "NS",
                            "NU",
                            "ON",
                            "PE",
                            "QC",
                            "SK",
                            "YT"
                        ],
                        "type": "string",
                        "maxLength": 2,
                        "description": "accepts one of these values: [ 'AL', 'AK', 'AS', 'AZ', 'AR', 'AA', 'AE', 'AP', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT' ].\nrequired only if payment_method is 'Check'"
                    },
                    "remit_zipcode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "max length = 10\nrequired only if payment_method is 'Check'"
                    },
                    "remit_country": {
                        "enum": [
                            "CAN",
                            "UMI",
                            "USA"
                        ],
                        "default": "USA",
                        "type": "string",
                        "description": "accepts one of these values: [ 'CAN', 'UMI', 'USA' ].\nrequired only if payment_method is 'Check'"
                    },
                    "corporate_address_1": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "corporate_address_2": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "corporate_city": {
                        "type": "string",
                        "maxLength": 40,
                        "description": "max length = 40"
                    },
                    "corporate_state": {
                        "enum": [
                            "AL",
                            "AK",
                            "AS",
                            "AZ",
                            "AR",
                            "AA",
                            "AE",
                            "AP",
                            "CA",
                            "CO",
                            "CT",
                            "DE",
                            "DC",
                            "FL",
                            "GA",
                            "GU",
                            "HI",
                            "ID",
                            "IL",
                            "IN",
                            "IA",
                            "KS",
                            "KY",
                            "LA",
                            "ME",
                            "MD",
                            "MA",
                            "MI",
                            "MN",
                            "MS",
                            "MO",
                            "MT",
                            "NE",
                            "NV",
                            "NH",
                            "NJ",
                            "NM",
                            "NY",
                            "NC",
                            "ND",
                            "MP",
                            "OH",
                            "OK",
                            "OR",
                            "PA",
                            "PR",
                            "RI",
                            "SC",
                            "SD",
                            "TN",
                            "TX",
                            "UT",
                            "VT",
                            "VI",
                            "VA",
                            "WA",
                            "WV",
                            "WI",
                            "WY",
                            "AB",
                            "BC",
                            "MB",
                            "NB",
                            "NL",
                            "NT",
                            "NS",
                            "NU",
                            "ON",
                            "PE",
                            "QC",
                            "SK",
                            "YT"
                        ],
                        "type": "string",
                        "maxLength": 2,
                        "description": "accepts one of these values: [ 'AL', 'AK', 'AS', 'AZ', 'AR', 'AA', 'AE', 'AP', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT' ]"
                    },
                    "corporate_zipcode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "max length = 10"
                    },
                    "corporate_country": {
                        "enum": [
                            "CAN",
                            "UMI",
                            "USA"
                        ],
                        "default": "USA",
                        "type": "string",
                        "description": "accepts one of these values: [ 'CAN', 'UMI', 'USA' ]. Default USA if no value specified."
                    },
                    "corporate_phone_number": {
                        "type": "string",
                        "maxLength": 16,
                        "description": "max length = 16"
                    },
                    "external_reference_id": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "max length = 200. Secondary identifier. This value must be unique."
                    },
                    "tax_id": {
                        "type": "string",
                        "maxLength": 11,
                        "description": "max length = 11"
                    },
                    "contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SupplierContact"
                        }
                    },
                    "remit_email": {
                        "type": "string",
                        "format": "email",
                        "description": "required only if payment_method is 'Card' and delivery_method is 'Email'."
                    },
                    "bank_account_number": {
                        "type": "string",
                        "maxLength": 17,
                        "description": "max length = 17\nrequired only if payment_method is 'ACH' or 'Wire' or 'FinexioExpress'.\nIt can't contain non-numeric characters."
                    },
                    "bank_routing_number": {
                        "type": "string",
                        "maxLength": 9,
                        "description": "max length = 9\nrequired only if payment_method is 'ACH' or 'Wire' or 'FinexioExpress'."
                    },
                    "payment_method": {
                        "type": "string",
                        "enum": [
                            "ACH",
                            "Card",
                            "Check",
                            "Wire"
                        ],
                        "description": "accepts one of these values: [ 'ACH', 'Card', 'Check','Wire' ]."
                    },
                    "delivery_method": {
                        "type": "string",
                        "description": "accepts one of these values: [ 'Mail', 'Email', 'Portal','Phone' ] and can be null.\nRequired only if payment_method is other than ACH and Wire."
                    },
                    "notification_method": {
                        "type": "string",
                        "enum": [
                            "Mail",
                            "Email"
                        ],
                        "description": "accepts one of these values: [ 'Mail', 'Email' ]."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "payment_terms": {
                        "type": "integer",
                        "description": "Allowed values: min = 0, max = 365. Payment terms is optional field. This is an integer field and represents No. of days."
                    },
                    "ineligible_for_conversion": {
                        "type": "boolean",
                        "description": "Supplier conversion eligibility determines if Finexio SHOULD NOT reach out to this supplier due to high sensitivity or special payment arrangements or contracted terms.",
                        "default": false
                    },
                    "payee_type": {
                        "enum": [
                            "Employee",
                            "Business",
                            "InternalTransfer",
                            "Student",
                            "Individual"
                        ],
                        "type": "string",
                        "description": "Accepts one of these values: [ 'Employee', 'Business','InternalTransfer','Student', 'Individual' ]"
                    },
                    "twelve_month_payment_count": {
                        "type": "integer",
                        "description": "This is related to spend data and indicates the number of payments made to that supplier over the last 12 months."
                    },
                    "twelve_month_spend": {
                        "type": "integer",
                        "description": "This is related to spend data and indicates the total dollar amount paid to that supplier over the last 12 months."
                    },
                    "notes": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "max length = 1000\nOptional information about supplier."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Array of name/value pairs.The name can be any character string not beginning with _ with a max length of 25 characters, The value can have a max length of 100 chars and can be null."
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Used to indicate if the supplier is enabled and therefore payable."
                    },
                    "internal_payments": {
                        "type": "boolean",
                        "description": "Payments will be made by Finexio staff using the Phone or Portal delivery method.",
                        "default": false
                    }
                }
            },
            "SupplierCreate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SupplierBase"
                    },
                    {
                        "required": [
                            "name",
                            "external_reference_id",
                            "payment_method"
                        ]
                    }
                ]
            },
            "SupplierUpdate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SupplierBase"
                    }
                ]
            },
            "SupplierListReturn": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "next": {
                        "type": "string",
                        "readOnly": true
                    },
                    "previous": {
                        "type": "string",
                        "readOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SupplierBase"
                        }
                    }
                }
            },
            "SupplierContact": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ContactBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "payment_notification": {
                                "type": "boolean",
                                "default": false,
                                "description": "Indicates whether notifications of payments need to be sent using the email value."
                            }
                        }
                    }
                ]
            },
            "Webhook": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookRequestBodyModel"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid",
                                "readOnly": true
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "readOnly": true
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "readOnly": true
                            },
                            "subscription": {
                                "type": "string",
                                "readOnly": true
                            }
                        }
                    }
                ]
            },
            "WebhookListReturn": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "next": {
                        "type": "string"
                    },
                    "previous": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Webhook"
                        }
                    }
                }
            },
            "WebhookRequestBodyModel": {
                "type": "object",
                "properties": {
                    "event": {
                        "enum": [
                            "payment.changed"
                        ],
                        "type": "string",
                        "description": "Name of event to connect with"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "Callback URL",
                        "maxLength": 190,
                        "pattern": "^(?:[a-z0-9\\.\\-\\+]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[/?#][^\\s]*)?"
                    },
                    "content_type": {
                        "enum": [
                            "application/json",
                            "application/x-www-form-urlencoded"
                        ],
                        "type": "string",
                        "description": "Desired content type for requests to this callback."
                    },
                    "user": {
                        "type": "integer"
                    },
                    "username": {
                        "type": "string",
                        "description": "Basic Auth username",
                        "maxLength": 190
                    },
                    "password": {
                        "type": "string",
                        "description": "Basic Auth password",
                        "maxLength": 190
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Counterparties",
            "description": "Counterparties management"
        },
        {
            "name": "Buyers",
            "description": "Buyers management"
        },
        {
            "name": "Suppliers",
            "description": "Suppliers management"
        },
        {
            "name": "Payments",
            "description": "Payments management"
        },
        {
            "name": "Invoices",
            "description": "Invoices management"
        },
        {
            "name": "Webhooks",
            "description": "Webhooks to be used by developers"
        }
    ]
}